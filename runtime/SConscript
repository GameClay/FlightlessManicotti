Import('env')
runtime_env = env.Clone()

#runtime_env.Replace(CC = "clang")

# Files used for runtime library
core_files = Glob('core/*.c', strings=True)
c1x_files = Glob('std/C1x/*.c', strings=True)
script_files = Glob('script/*.c', strings=True) + Glob('script/modules/*.c', strings=True)

# Autogenerated Lua wrappers
import build_swig_header
runtime_env.Append(SWIGFLAGS=['-lua'])
swig_files = Glob('script/swig/*.i', strings=True)
runtime_env.Command("swig_autogen.h", swig_files, build_swig_header.build)

# Assemble the runtime lib source files
lib_files = core_files + c1x_files + script_files + swig_files

# Prune out excluded files
excluded_files = []
lib_files = [f for f in lib_files if f not in excluded_files]

# Build runtime library
runtime_env.Append(CPPDEFINES=['KL_BUILD_LIBRARY'])
runtime_lib = runtime_env.SharedLibrary('FlightlessManicotti', 
	lib_files,
	CPPPATH = ['.'] + env['KL_DEP_INCPATH'],
 	CCFLAGS = ['-std=c99'] + env['CCFLAGS'],
	LIBS = ['libstdc++'] + env['KL_DEPS'], 
	LIBPATH = env['KL_DEP_LIBPATH']
)

# Find the headers
# sources, headers = env.FindAllSourceFiles(runtime_lib)

Return('runtime_lib')