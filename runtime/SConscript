import sys

Import('env')
env.Append(CPPPATH = [env.Dir('include').abspath])
runtime_env = env.Clone()

# Files used for runtime library
core_files = Glob('src/core/*.c', strings=True) + Glob('src/process/*.c', strings=True)
script_files = Glob('src/scriptinterface/*.c', strings=True) + Glob('src/scriptinterface/modules/*.c', strings=True) + \
   Glob('src/scriptinterface/helpers/*.c', strings=True)
game_files = Glob('src/game/*.c', strings=True) + Glob('src/game/scene2d/*.c', strings=True)
render_files = Glob('src/render/*.c', strings=True)

# Platform specific render implementation
render_files += Glob('src/render/opengl/*.c', strings=True)

# Autogenerated Lua wrappers
import build_swig_header
runtime_env.Append(SWIGFLAGS=['-lua'])
swig_files = Glob('src/scriptinterface/swig/*.i', strings=True)
runtime_env.Command("src/swig_autogen.h", swig_files, build_swig_header.build)

# Assemble the runtime lib source files
lib_files = core_files + script_files + swig_files + game_files + render_files

# Prune out excluded files
excluded_files = []
lib_files = [f for f in lib_files if f not in excluded_files]

# Set path
runtime_env.Append(CPPPATH = ['src', 'include'])

# Determine additional compiler flags
runtime_env.Append(CCFLAGS =['-Werror'])
runtime_env.Append(CPPDEFINES=['KL_BUILD_LIBRARY'])

if not (env['OS'] == 'ios' or env['OS'] == 'android'):
   runtime_env.Append(CCFLAGS =['-ansi', '-std=c89', '-pedantic'])

#if env['OS'] == 'android':
   #runtime_env.Append(CPPDEFINES = ['__ARM_NEON__'])
   #runtime_env.Append(CCFLAGS = ['-mfloat-abi=softfp', '-mfpu=neon'])

if env['OS'] == 'ios':
   runtime_env.Append(CPPDEFINES = ['KL_ARCH_NEON'])

# Determine additional libraries
runtime_env.Append(LIBS = ['libstdc++'])

if not(env['OS'] == 'android' or env['OS'] == 'windows'):
   runtime_env.Append(LIBS = ['pthread'])

if (env['OS'] == 'ios' or env['OS'] == 'darwin'):
   runtime_env.Append(LINKFLAGS = ['-framework', 'CoreServices',
                                   '-framework', 'OpenGL']);

# Build lib
return_libs = []
if (env['OS'] == 'ios'):
   static_lib = runtime_env.StaticLibrary('FlightlessManicotti', lib_files)
   return_libs += ['static_lib']
else:
   shared_lib = runtime_env.SharedLibrary('FlightlessManicotti', lib_files)
   return_libs += ['shared_lib']

# Find the headers
# sources, headers = env.FindAllSourceFiles(runtime_lib)

Return(return_libs)
