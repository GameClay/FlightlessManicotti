import sys

Import('env')
runtime_env = env.Clone()

# Files used for runtime library
core_files = Glob('src/core/*.c', strings=True) + Glob('src/process/*.c', strings=True)
script_files = Glob('src/scriptinterface/*.c', strings=True) + Glob('src/scriptinterface/modules/*.c', strings=True) + \
   Glob('src/scriptinterface/helpers/*.c', strings=True)
game_files = Glob('src/game/*.c', strings=True) + Glob('src/game/scene2d/*.c', strings=True)

# Autogenerated Lua wrappers
import build_swig_header
runtime_env.Append(SWIGFLAGS=['-lua'])
swig_files = Glob('src/scriptinterface/swig/*.i', strings=True)
runtime_env.Command("src/swig_autogen.h", swig_files, build_swig_header.build)

# Assemble the runtime lib source files
lib_files = core_files + script_files + swig_files + game_files

# Prune out excluded files
excluded_files = []
lib_files = [f for f in lib_files if f not in excluded_files]

# Determine additional compiler flags
runtime_ccflags = []
if sys.platform =="win32":
   runtime_ccflags += []
else:
   runtime_ccflags += ['-std=c99','-Werror']
   
   # No -pedantic on cross compiles, causes #include_next errors
   if not env['KL_CROSS_TARGET']:
      runtime_ccflags += ['-pedantic']

# Determine additional libraries
runtime_libs = []
if sys.platform =="win32":
   runtime_libs += []
else:
   runtime_libs += ['libstdc++','pthread']
   
# Determine build function
buildFn = runtime_env.SharedLibrary
if env['KL_CROSS_TARGET']:
   buildFn = runtime_env.StaticLibrary
   
# Build runtime library
runtime_env.Append(CPPDEFINES=['KL_BUILD_LIBRARY'])
runtime_lib = buildFn('FlightlessManicotti', 
   lib_files,
   CPPPATH = ['src/'] + env['KL_DEP_INCPATH'] + env['KL_INCPATH'] + env['KL_PLATFORM_INC_PATH'],
   CCFLAGS = runtime_ccflags + env['CCFLAGS'],
   LIBS = runtime_libs + env['KL_DEPS'], 
   LIBPATH = env['KL_DEP_LIBPATH'] + env['KL_PLATFORM_LIB_PATH'],
   LINKFLAGS = '-framework CoreServices'
)

# Find the headers
# sources, headers = env.FindAllSourceFiles(runtime_lib)

Return('runtime_lib')