
/**
 * @mainpage amp - assemblies for parallelism
 *
 * @em amp is a collection of portable low-level C assemblies for parallelism and   
 * threading, for example @c amp_thread, @c amp_semaphore, or @c amp_mutex. Use 
 * these parallelism atoms to create higher-level parallel solutions by 
 * including @c amp/amp.h. @em amp tries to be as minimal as possible to be 
 * easily portable and usable in different projects so they don't have to write 
 * this low-level cross-platform wrappers again and again.
 *
 * All functions and types use the @c amp_ prefix, while preprocessor symbols 
 * use @c AMP_.  
 *
 * No platform specific headers and symbols are included by @c amp/amp.h. 
 * However you can access headers containing @c _raw_ in their file name. These 
 * are shallow wrappers around the platforms thread functionality and include 
 * platform specific headers. 
 *
 * The following platforms are supported: Mac OS X 10.6, Windows 
 * (XP and higher), and platforms supporting POSIX threads (Pthreads). As of yet
 * @em amp is actively developed and tested on Mac OS X and WindowsXP.
 *
 * @em amp is developed using a test-driven methodology. Tests rely on the 
 * <a href="http://unittest-cpp.sourceforge.net/">UnitTest++</a> library by 
 * Noel Llopis and Charles Nicholson. Take a look at the source files
 * in the @c test subdirectory to get an impression how to use @em amp.
 *
 * The code can be found and downloaded at: http://github.com/bjoernknafla/amp <br>
 * Please file issues with the code at: http://github.com/bjoernknafla/amp/issues <br>
 *
 *
 * @section usage_guidelines Usage guidelines
 *
 * Never pass @c NULL or invalid pointers to the @em amp functions if it is not
 * specifically documented to be ok.
 *
 * Never pass non-created/uninitialized values to @em amp functions other than
 * to the create and init functions. @em amp has no way to detect invalid pointers
 * and for performance reasons does not even try to detect them.
 *
 * Always check return codes that flag errors that can occur, e.g. not enough
 * memory, errors indicating that a threading primitive count has reached its
 * max, or return codes from trylocks which indicate that attaining the lock was
 * not successful.
 * At least assert on return codes that indicate programming errors, e.g. 
 * passing out of range count values to create functions.
 * Many programming errors will result in undefined behavior - read the 
 * documentation and prevent making these errors, e.g. trying to unlock a mutex
 * owned by another thread.
 *
 * Never copy raw primitives! It is ok to have multiple pointers to a single
 * raw primitive but care for ownership and lifetime management in that case.
 *
 * @em amp should be used to create higher-level parallelism abstractions, e.g.
 * job or task pools, but threads shouldn't be used by the typical programmer
 * working on non-parallelism domain solutions.
 *
 *
 * @section primitives amp primitives
 * 
 * @em amp supports the following cross-platform threading and parallelism 
 * primitives:
 *
 * - @c amp_thread - launch and join with threads.
 * - @c amp_thread_local_slot - thread specific storage.
 * - @c amp_thread_array - control a whole set of threads.
 * - @c amp_mutex - lock, trylock, or unlock a mutex.
 * - @c amp_condition_variable - signal, broadcast, or wait on a condition 
 *   variable in combination with a mutex. Works on WindowsXP, too.
 * - @c amp_semaphore - signal or wait on a semaphore.
 * - @c amp_barrier - barrier for a specified number of threads.
 * - @c amp_platform - query the platform for the installed and/or active number
 *   of processor cores or hardware-threads.
 *
 *
 * @section warning Warning
 *
 * @em amp just started to aggregate in code - and it will change, transform, 
 * and grow from version to version.
 *
 *
 * @section acknowledgements Acknowledgements
 *
 * Many thanks go to the following guys (in order of "appearance", twitter
 * name in brackets) - you are awesome:
 *
 * <ul>
 * <li>Anthony Williams (<a href="http://twitter.com/a_williams">@a_williams</a>)
 *     and Dimitriy V'jukov (<a href="http://twitter.com/dvyukov">@dvyukov</a>)
 *     (names in order of discussion contacts) for their interest and time to 
 *     discuss the WindowsXP condition variable implementation, and their 
 *     invaluable and awesome feedback that opened my eyes and made this code 
 *     more correct and faster. All remaining errors in the code are mine.
 * </li>
 *
 * <li>Jedd Orion Haberstro 
 *     (<a href="http://twitter.com/jhaberstro">@jhaberstro</a>) for indepth 
 *     feedback to the documentation of @c amp_thread_yield which resulted in a 
 *     clearer explanation of the function.</li>
 *
 * <li>Rick Molloy (<a href="http://twitter.com/rickmolloy">@rickmolloy</a>) for
 *     insightful discussions and his help to port and test @em amp on 
 *     Windows 7.</li>
 * </ul>
 *
 *
 * @section authors_and_contact Author(s) and Contact
 *
 * You have got questions, need to critisize me, or just want to say hello? I
 * am looking forward to hear from you!
 *
 * Bjoern Knafla <br>
 * Bjoern Knafla Parallelization + AI + Gamedev Consulting <br>
 * email <a href="mailto:amp@bjoernknafla.com">amp\@bjoernknafla.com</a> <br>
 * web <a href="http://www.bjoernknafla.com">www.bjoernknafla.com</a> <br>
 * twitter <a href="http://twitter.com/bjoernknafla">\@bjoernknafla</a>
 *
 * @section copyright_and_license Copyright and License
 *
 * @em amp is free software. You may copy, distribute, and modify it under the terms
 * of the license contained in the file COPYRIGHT.txt distributed with this
 * package. This license is equal to the Simplified BSD License.
 *
 * @em amp was developed as a foundation to experiment and research job pools for 
 * computer and video games and to parallelize the AiGameDev.com Sandbox.
 *
 * Joint ownership of the copyright belongs to <a href="http://www.bjoernknafla.com">Bjoern Knafla</a>
 * and <a href="http://AiGameDev.com">AiGameDev.com</a>.
 *
 *
 * @section building Building
 *
 * See the @c BUILDING.txt file in the root directory of the project for build
 * instructions.
 *
 *
 * @section references References
 *
 *  -  David R. Butenhof, Programming POSIX Threads, Addison-Wesley, 1997
 *  -  Bil Lewis and Danile J. Berg, Multithreaded Programming with Pthreads, 
 *     Sun Microsystems Press, 1998
 *  -  Joe Duffy, Concurrent Programming on Windows, Addison-Wesley 2009
 *  -  Maurice Herlihy and Nir Shavit, The Art of Multiprocessor Programming, 
 *     Morgan Kaufmann, 2008
 *  -  Gadi Taubenfeld, Synchronization Algorithms and Concurrent Programming,
 *     Pearson Education, 2006
 *
 *
 * @section disclaimer Disclaimer
 *
 * All trademarks copyrights belong to their respective trademark holders and
 * copyright owners.
 *
 *
 * @section release_notes Release Notes
 * 
 * @subsection version_0_1_0 Version 0.1.0 (July 06, 2010)
 *
 *  - Separated raw and non-raw headers. Only raw headers include platform
 *    specific headers. Use non-raw headers for minimal compile-time 
 *    dependencies.
 *  - Added a platform core count or hardware-threads detection.
 *  - Added a simple barrier primitive.
 *  - Added thread arrays to simplify creation, destruction, and control of
 *    a whole set of threads.
 *  - Functions do not return errno or POSIX error codes anymore but only return
 *    codes defined in amp_return_code.h.
 *  - Creation and destruction functions use an amp allocator for memory 
 *    management.
 *  - Xcode test and platform check targets build and run different combinations
 *    of platform backends for easier testing and error detection than running
 *    all tests by hand.
 *  - Made thread id querying internal because its Pthreads implementation is
 *    currently a hack.
 * 
 * @subsection version_0_0_1 Version 0.0.1 (September 10, 2009)
 * - Initial release.
 *
 */