import sys

Import('env')

# Add AMP includes to the path
env.Append(CPPPATH = [env.Dir('src/c').abspath])

coreEnv = env.Clone()

# Files used for all platforms/configurations
lib_files = [
    'src/c/amp/amp_barrier_common.c',
    'src/c/amp/amp_condition_variable_common.c',
    'src/c/amp/amp_memory.c',
    'src/c/amp/amp_mutex_common.c',
    'src/c/amp/amp_platform_common.c',
    'src/c/amp/amp_semaphore_common.c',
    'src/c/amp/amp_thread_array.c',
    'src/c/amp/amp_thread_common.c',
    'src/c/amp/amp_thread_local_slot_common.c',
]

# Pick barrier type
# if AMP_USE_GENERIC_BROADCAST_BARRIERS in env.__dict and not (env['AMP_USE_GENERIC_BROADCAST_BARRIERS']is None):
if 0:
    coreEnv.Append(CPPDEFINES=['AMP_USE_GENERIC_BROADCAST_BARRIERS'])
    lib_files += ['src/c/amp/amp_barrier_generic_broadcast.c']
else:
    coreEnv.Append(CPPDEFINES=['AMP_USE_GENERIC_SIGNAL_BARRIERS'])
    lib_files += ['src/c/amp/amp_barrier_generic_signal.c']

# Platform specific files
if (env['OS_GROUP'] == 'windows'):
    coreEnv.Append(CPPDEFINES=['AMP_USE_WINTHREADS'])
    lib_files += [
        'src/c/amp/amp_condition_variable_winthreads.c',
        'src/c/amp/amp_mutex_winthreads.c',
        'src/c/amp/amp_internal_platform_win_system_info.c',
        'src/c/amp/amp_internal_platform_win_system_logical_processor_information.c',
        'src/c/amp/amp_semaphore_winthreads.c',
        'src/c/amp/amp_thread_local_slot_winthreads.c',
        'src/c/amp/amp_thread_winthreads.c'
    ]
else:
    coreEnv.Append(CPPDEFINES=['AMP_USE_PTHREADS'])
    lib_files += [
        'src/c/amp/amp_condition_variable_pthreads.c',
        'src/c/amp/amp_mutex_pthreads.c',
        'src/c/amp/amp_thread_local_slot_pthreads.c',
        'src/c/amp/amp_thread_pthreads.c'
    ]
    if (env['OS'] == 'darwin'):
        coreEnv.Append(CPPDEFINES=['AMP_USE_LIBDISPATCH_SEMAPHORES'])
        lib_files += [
            'src/c/amp/amp_semaphore_libdispatch.c',
            'src/c/amp/amp_platform_sysctl.c'
        ]
    elif (env['OS'] == 'linux'):
        coreEnv.Append(CPPDEFINES=['AMP_USE_POSIX_1003_1B_SEMAPHORES', 'SEM_VALUE_MAX=2147483647'])
        lib_files += [
            'src/c/amp/amp_semaphore_posix_1003_1b.c',
            'src/c/amp/amp_platform_gnuc.c'
        ]
    else:
        lib_files += [
            'src/c/amp/amp_platform_sysconf.c',
            'src/c/amp/amp_semaphore_pthreads.c'
        ]

coreEnv.Append(CCFLAGS = ['-std=c99'])
coreEnv.Append(CPPPATH = ['src'])

# lib target
amp_lib = coreEnv.StaticLibrary('amp',lib_files)

Return(['amp_lib'])